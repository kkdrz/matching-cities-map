{"version":3,"sources":["App.js","Footer.js","index.js"],"names":["App","useState","allCities","setAllCities","matchingCities","setMatchingCities","regex","setRegex","fragment","setFragment","loading","setLoading","isValidFragment","length","useEffect","fetch","process","then","r","json","cities","console","log","timeoutId","setTimeout","filter","city","name","toLowerCase","includes","expression","RegExp","test","filtered","clearTimeout","className","style","padding","marginLeft","type","minLength","value","onChange","e","target","onClick","textAlign","hidden","height","minZoom","maxZoom","zoom","center","geography","geographies","map","geo","fill","rsmKey","i","coordinates","Y","X","Footer","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c85f65a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\n\nfunction App() {\n  const MAX_NUMBER_OF_MATCHING_CITIES = 40000;\n  const [allCities, setAllCities] = useState([]);\n  const [matchingCities, setMatchingCities] = useState([]);\n  const [regex, setRegex] = useState(false);\n  const [fragment, setFragment] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const getAllCities = () => {\n    setLoading(true);\n    fetch(process.env.PUBLIC_URL + \"/static/cities.json\")\n      .then((r) => r.json())\n      .then((cities) => {\n        setAllCities(cities);\n        setLoading(false);\n        console.log(\"JSON file loaded\");\n      });\n  };\n\n  useEffect(() => {\n    getAllCities();\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    const timeoutId = setTimeout(() => {\n      if (!isValidFragment(fragment)) {\n        setMatchingCities([]);\n        setLoading(false);\n        return;\n      }\n\n      let filter = (city) => city.name.toLowerCase().includes(fragment);\n\n      if (regex) {\n        let expression = new RegExp(fragment, \"i\");\n        filter = (city) => expression.test(city.name.toLowerCase());\n      }\n\n      let filtered = allCities.filter(filter);\n      console.log(\"Found \" + filtered.length + \" places\");\n      setLoading(false);\n      setMatchingCities(filtered);\n    }, 1000);\n\n    return () => {\n      setLoading(false);\n      clearTimeout(timeoutId);\n    };\n  }, [allCities, fragment, regex]);\n\n  function isValidFragment(fragment) {\n    return !!fragment && fragment.length > 1;\n  }\n\n  return (\n    <div className=\"flex-col\">\n      <div className=\"flex-row\" style={{padding:\"10px\"}}>\n        <label>\n          Wzorzec:\n          <input\n            style={{marginLeft: \"5px\"}}\n            type=\"text\"\n            minLength={2}\n            value={fragment}\n            onChange={(e) => setFragment(e.target.value.toLowerCase())}\n          />\n        </label>\n        <label style={{marginLeft: \"10px\"}}>\n          <input\n            type=\"checkbox\"\n            value={regex}\n            onClick={(e) => setRegex(e.target.value)}\n          ></input>\n          Regex\n        </label>\n      </div>\n\n      <div className=\"flex-col\" style={{textAlign: \"center\"}}>\n        <div hidden={!loading}>\n          <h3>Ładowanie...</h3>\n        </div>\n\n        <div hidden={isValidFragment(fragment) || loading}>\n          <h3>Podany wzorzec jest za krótki</h3>\n        </div>\n\n        <div hidden={matchingCities.length < MAX_NUMBER_OF_MATCHING_CITIES}>\n          <h3>\n            Podany wzorzec pasuje do zbyt dużej liczby miast (\n            {matchingCities.length})\n            <br />- wywali przeglądarkę\n          </h3>\n        </div>\n\n        <div\n          hidden={loading || !isValidFragment(fragment)}\n        >\n          <h3>\n            {fragment} {regex ? \"(regex)\" : \"\"}\n          </h3>\n          <h3>\n            {\" Znaleziono \" +\n              matchingCities.length +\n              (matchingCities.length === 1\n                ? \" miejscowość.\"\n                : \" miejscowości.\")}{\" \"}\n          </h3>\n        </div>\n      </div>\n\n      <div className=\"map flex-col flex-grow\" hidden={loading}>\n        <ComposableMap className=\"flex-col flex-grow\" height={300}>\n          <ZoomableGroup\n            minZoom={17}\n            maxZoom={17}\n            zoom={17}\n            center={[19.1343786, 51.9189046]}\n          >\n            <Geographies\n              geography={process.env.PUBLIC_URL + \"/static/gadm36_POL_1.json\"}\n            >\n              {({ geographies }) =>\n                geographies.map((geo) => (\n                  <Geography key={geo.rsmKey} geography={geo} fill={\"#ddd\"} />\n                ))\n              }\n            </Geographies>\n            {matchingCities.length < MAX_NUMBER_OF_MATCHING_CITIES &&\n              matchingCities.map((city, i) => (\n                <Marker key={i} coordinates={[city.Y, city.X]} fill=\"#777\">\n                  <circle r={0.1} fill=\"#F53\" />\n                </Marker>\n              ))}\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nconst Footer = () => {\n\n  return (<>\n    <div className=\"footer\">\n      <p>\n        Jeżeli aplikacja się zacięła, oznacza to, że znaleziono bardzo dużo\n        miejscowości i renderowanie tego może trochę potrwać.\n        <br />\n        Możesz poczekać lub spróbować innego wzorca ;)\n        <br />\n        Nie, nie ma tu backendu.\n      </p>\n      <p>\n        Dane miejscowości pochodzą z{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          href=\"https://www.geoportal.gov.pl/dane/panstwowy-rejestr-nazw-geograficznych\"\n        >\n          PRNG\n        </a>\n        {\". \"}\n        Model mapy pobrano z{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          href=\"https://gadm.org/download_country_v3.html\"\n        >\n          GADM\n        </a>{\" \"}\n        i wyrenderowano za pomocą{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          href=\"https://github.com/zcreativelabs/react-simple-maps\"\n        >\n          react-simple-maps\n        </a>{\".\"}\n      </p>\n      <p>\n        <b>Konrad Drozd 2021</b> -{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://kdrozd.pl\">\n          kdrozd.pl\n        </a>\n      </p>\n    </div>\n    </>)\n}\n  \n\nexport default Footer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Footer from \"./Footer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Footer></Footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}