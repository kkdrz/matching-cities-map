{"version":3,"sources":["App.js","Footer.js","index.js"],"names":["App","useState","allCities","setAllCities","matchingCities","setMatchingCities","regex","setRegex","fragment","setFragment","loading","setLoading","clickedCity","setClickedCity","isValidFragment","length","useEffect","fetch","process","then","r","json","cities","console","log","timeoutId","setTimeout","filter","city","name","toLowerCase","includes","expression","RegExp","test","filtered","clearTimeout","className","style","padding","marginLeft","type","minLength","value","onChange","e","target","onClick","hidden","textAlign","height","minZoom","maxZoom","zoom","center","geography","geographies","map","geo","fill","rsmKey","i","coordinates","Y","X","Footer","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2fb90ed.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\n\nfunction App() {\n  const MAX_NUMBER_OF_MATCHING_CITIES = 40000;\n  const [allCities, setAllCities] = useState([]);\n  const [matchingCities, setMatchingCities] = useState([]);\n  const [regex, setRegex] = useState(false);\n  const [fragment, setFragment] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [clickedCity, setClickedCity] = useState(\"\");\n\n  const getAllCities = () => {\n    setLoading(true);\n    fetch(process.env.PUBLIC_URL + \"/static/cities.json\")\n      .then((r) => r.json())\n      .then((cities) => {\n        setAllCities(cities);\n        setLoading(false);\n        console.log(\"JSON file loaded\");\n      });\n  };\n\n  useEffect(() => {\n    getAllCities();\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    const timeoutId = setTimeout(() => {\n      if (!isValidFragment(fragment)) {\n        setMatchingCities([]);\n        setLoading(false);\n        return;\n      }\n\n      let filter = (city) => city.name.toLowerCase().includes(fragment);\n\n      if (regex) {\n        let expression = new RegExp(fragment, \"i\");\n        filter = (city) => expression.test(city.name.toLowerCase());\n      }\n\n      let filtered = allCities.filter(filter);\n      console.log(\"Found \" + filtered.length + \" places\");\n      setLoading(false);\n      setMatchingCities(filtered);\n    }, 1000);\n\n    return () => {\n      setLoading(false);\n      clearTimeout(timeoutId);\n    };\n  }, [allCities, fragment, regex]);\n\n  function isValidFragment(fragment) {\n    return !!fragment && fragment.length > 1;\n  }\n\n  return (\n    <div className=\"flex-col\">\n      <div className=\"flex-row\" style={{ padding: \"10px\" }}>\n        <label>\n          Wzorzec:\n          <input\n            style={{ marginLeft: \"5px\" }}\n            type=\"text\"\n            minLength={2}\n            value={fragment}\n            onChange={(e) => setFragment(e.target.value.toLowerCase())}\n          />\n        </label>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            value={regex}\n            onClick={(e) => setRegex(e.target.value)}\n          ></input>\n          Regex\n        </label>\n        <span hidden={!!clickedCity} style={{marginLeft: \"auto\"}}><i>Kliknij na kropkę, aby sprawdzić nazwę</i></span>\n        <span hidden={!clickedCity} style={{marginLeft: \"auto\"}}>{clickedCity}</span>\n      </div>\n\n      <div className=\"flex-col\" style={{ textAlign: \"center\" }}>\n        <div hidden={!loading}>\n          <h3>Ładowanie...</h3>\n        </div>\n\n        <div hidden={isValidFragment(fragment) || loading}>\n          <h3>Podany wzorzec jest za krótki</h3>\n        </div>\n\n        <div hidden={matchingCities.length < MAX_NUMBER_OF_MATCHING_CITIES}>\n          <h3>\n            Podany wzorzec pasuje do zbyt dużej liczby miast (\n            {matchingCities.length})\n            <br />- wywali przeglądarkę\n          </h3>\n        </div>\n\n        <div hidden={loading || !isValidFragment(fragment)}>\n          <h3>\n            {fragment} {regex ? \"(regex)\" : \"\"}\n          </h3>\n          <h3>\n            {\" Znaleziono \" +\n              matchingCities.length +\n              (matchingCities.length === 1\n                ? \" miejscowość.\"\n                : \" miejscowości.\")}{\" \"}\n          </h3>\n        </div>\n      </div>\n\n      <div className=\"map flex-col flex-grow\" hidden={loading}>\n        <ComposableMap className=\"flex-col flex-grow\" height={300}>\n          <ZoomableGroup\n            minZoom={17}\n            maxZoom={17}\n            zoom={17}\n            center={[19.1343786, 51.9189046]}\n          >\n            <Geographies\n              geography={process.env.PUBLIC_URL + \"/static/gadm36_POL_1.json\"}\n            >\n              {({ geographies }) =>\n                geographies.map((geo) => (\n                  <Geography key={geo.rsmKey} geography={geo} fill={\"#ddd\"} />\n                ))\n              }\n            </Geographies>\n            {matchingCities.length < MAX_NUMBER_OF_MATCHING_CITIES &&\n              matchingCities.map((city, i) => (\n                <Marker key={i} coordinates={[city.Y, city.X]} fill=\"#777\">\n                  <circle className=\"marker\" r={0.1} fill=\"#F53\" onClick={() => setClickedCity(city.name)} />\n                </Marker>\n              ))}\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <>\n      <div className=\"footer\">\n        <p>\n          Jeżeli aplikacja się zacięła, oznacza to, że znaleziono bardzo dużo\n          miejscowości i renderowanie tego może trochę potrwać.\n          <br />\n          Możesz poczekać lub spróbować innego wzorca ;)\n        </p>\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://kdrozd.pl/map-of-localities-matching-the-pattern/\"\n          >\n            Tutaj\n          </a>{\" \"}\n          znajdziesz wpis na blogu na temat tej aplikacji.\n        </p>\n        <p>\n          Dane miejscowości pochodzą z{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://www.geoportal.gov.pl/dane/panstwowy-rejestr-nazw-geograficznych\"\n          >\n            PRNG\n          </a>\n          {\". \"}\n          Model mapy pobrano z{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://gadm.org/download_country_v3.html\"\n          >\n            GADM\n          </a>{\" \"}\n          i wyrenderowano za pomocą{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://github.com/zcreativelabs/react-simple-maps\"\n          >\n            react-simple-maps\n          </a>\n          {\".\"}\n        </p>\n        <p>\n          <b>Konrad Drozd 2021</b> -{\" \"}\n          <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://kdrozd.pl\">\n            kdrozd.pl\n          </a>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Footer from \"./Footer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Footer></Footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}