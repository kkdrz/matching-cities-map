{"version":3,"sources":["Footer.js","App.js","index.js"],"names":["Footer","className","target","rel","href","App","useState","allCities","setAllCities","matchingCities","setMatchingCities","regex","setRegex","fragment","setFragment","loading","setLoading","isValidFragment","length","useEffect","fetch","then","r","json","cities","console","log","timeoutId","setTimeout","filter","city","name","toLowerCase","includes","expression","RegExp","test","filtered","clearTimeout","type","minLength","value","onChange","e","onClick","style","textAlign","hidden","height","width","minZoom","maxZoom","zoom","center","geography","geographies","map","geo","fill","rsmKey","i","coordinates","Y","X","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c55f5e8e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>\n      Jeżeli aplikacja się zacięła, oznacza to, że znaleziono bardzo dużo\n      miejscowości i renderowanie tego może trochę potrwać.\n      <br />\n      Możesz poczekać lub spróbować innego wzorca ;)\n      <br />\n      Nie, nie ma tu backendu.\n    </p>\n    <p>\n      Dane miejscowości pochodzą z{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        href=\"https://www.geoportal.gov.pl/dane/panstwowy-rejestr-nazw-geograficznych\"\n      >\n        PRNG\n      </a>\n      {\". \"}\n      Model mapy pobrano z{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        href=\"https://gadm.org/download_country_v3.html\"\n      >\n        GADM\n      </a>{\" \"}\n      i wyrenderowano za pomocą{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        href=\"https://github.com/zcreativelabs/react-simple-maps\"\n      >\n        react-simple-maps\n      </a>{\".\"}\n    </p>\n    <p>\n      <b>Konrad Drozd 2021</b> -{\" \"}\n      <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://kdrozd.pl\">\n        kdrozd.pl\n      </a>\n    </p>\n  </div>\n);\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  const MAX_NUMBER_OF_MATCHING_CITIES = 40000;\n  const [allCities, setAllCities] = useState([]);\n  const [matchingCities, setMatchingCities] = useState([]);\n  const [regex, setRegex] = useState(false);\n  const [fragment, setFragment] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const getAllCities = () => {\n    setLoading(true);\n    fetch(\"/cities.json\")\n      .then((r) => r.json())\n      .then((cities) => {\n        setAllCities(cities);\n        setLoading(false);\n        console.log(\"JSON file loaded\");\n      });\n  };\n\n  useEffect(() => {\n    getAllCities();\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    const timeoutId = setTimeout(() => {\n      if (!isValidFragment(fragment)) {\n        setMatchingCities([]);\n        setLoading(false);\n        return;\n      }\n\n      let filter = (city) => city.name.toLowerCase().includes(fragment);\n\n      if (regex) {\n        let expression = new RegExp(fragment, \"i\");\n        filter = (city) => expression.test(city.name.toLowerCase());\n      }\n\n      let filtered = allCities.filter(filter);\n      console.log(\"Found \" + filtered.length + \" places\");\n      setLoading(false);\n      setMatchingCities(\n        filtered.length > MAX_NUMBER_OF_MATCHING_CITIES ? [] : filtered\n      );\n    }, 1000);\n\n    return () => {\n      setLoading(false);\n      clearTimeout(timeoutId);\n    };\n  }, [allCities, fragment, regex]);\n\n  function isValidFragment(fragment) {\n    return !!fragment && fragment.length > 1;\n  }\n\n  return (\n    <>\n      <label>\n        Wzorzec:\n        <input\n          type=\"text\"\n          minLength={2}\n          value={fragment}\n          onChange={(e) => setFragment(e.target.value.toLowerCase())}\n        />\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={regex}\n          onClick={(e) => setRegex(e.target.value)}\n        ></input>\n        Regex\n      </label>\n\n      <div style={{ textAlign: \"center\" }} hidden={!loading}>\n        <h1>Ładowanie...</h1>\n      </div>\n\n      <div style={{ textAlign: \"center\" }} hidden={isValidFragment(fragment)}>\n        <h1>Podany wzorzec jest za krótki</h1>\n      </div>\n\n      <div\n        style={{ textAlign: \"center\" }}\n        hidden={matchingCities.length < MAX_NUMBER_OF_MATCHING_CITIES}\n      >\n        <h1>\n          Podany wzorzec pasuje do zbyt dużej liczby miast (\n          {matchingCities.length})\n          <br />- wywali przeglądarkę\n        </h1>\n      </div>\n\n      <div\n        style={{ textAlign: \"center\" }}\n        hidden={loading || !isValidFragment(fragment)}\n      >\n        <h1>\n          {fragment} {regex ? \"(regex)\" : \"\"}\n        </h1>\n        <h2>\n          {\" Znaleziono \" +\n            matchingCities.length +\n            (matchingCities.length === 1\n              ? \" miejscowość.\"\n              : \" miejscowości.\")}{\" \"}\n        </h2>\n      </div>\n\n      <div hidden={loading}>\n        <ComposableMap height={400} width={1200}>\n          <ZoomableGroup\n            minZoom={20}\n            maxZoom={20}\n            zoom={20}\n            center={[19.1343786, 51.9189046]}\n          >\n            <Geographies geography={\"/gadm36_POL_1.json\"}>\n              {({ geographies }) =>\n                geographies.map((geo) => (\n                  <Geography key={geo.rsmKey} geography={geo} fill={\"#ddd\"} />\n                ))\n              }\n            </Geographies>\n            {matchingCities.map((city, i) => (\n              <Marker key={i} coordinates={[city.Y, city.X]} fill=\"#777\">\n                <circle r={0.1} fill=\"#F53\" />\n              </Marker>\n            ))}\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n\n      <Footer></Footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}